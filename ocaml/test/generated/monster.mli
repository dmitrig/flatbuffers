(** Automatically generated by the FlatBuffers compiler

    root type: MyGame.Sample.Monster (//monster.fbs)
    flatc version: 23.3.3
*)

module Make (R : Flatbuffers.Runtime.Intf_impl) : sig
module Rt : Flatbuffers.Runtime.Intf with module T := R.T

module rec MyGame : sig
  module rec Sample : sig
    (* Union MyGame.Sample.Equipment (//monster.fbs) *)
    module rec Equipment : sig
      type t = private Rt.UType.t

      val none : t
      val weapon : t
      val to_string : t -> string
    end

    (* Enum MyGame.Sample.Color (//monster.fbs) *)
    and Color : sig
      type t = private Rt.Byte.t

      val red : t
      val green : t
      val blue : t
      val to_string : t -> string

      module Vector : Rt.VectorS with type 'b elt := t and type builder_elt := t
    end

    (* Table MyGame.Sample.Weapon (//monster.fbs) *)
    and Weapon : sig
      type t

      module Vector : Rt.VectorS with type 'b elt := ('b, t) Rt.fb and type builder_elt := t Rt.wip

      val name : 'b Rt.buf -> ('b, t) Rt.fb -> ('b, Rt.String.t) Rt.fbopt
      val damage : 'b Rt.buf -> ('b, t) Rt.fb -> Rt.Short.t

      module Builder : sig
        type t

        val start : Rt.Builder.t -> t
        val finish : t -> Weapon.t Rt.wip
        val add_name : Rt.String.t Rt.wip -> t -> t
        val add_damage : Rt.Short.t -> t -> t
      end
    end

    (* Struct MyGame.Sample.Vec3 (//monster.fbs) *)
    and Vec3 : sig
      type t = (Rt.Float.t * Rt.Float.t * Rt.Float.t)

      module Vector : Rt.VectorS with type 'b elt := ('b, t) Rt.fb and type builder_elt := t

      val x : 'b Rt.buf -> ('b, t) Rt.fb -> Rt.Float.t
      val y : 'b Rt.buf -> ('b, t) Rt.fb -> Rt.Float.t
      val z : 'b Rt.buf -> ('b, t) Rt.fb -> Rt.Float.t
    end

    (* Table MyGame.Sample.Monster (//monster.fbs) *)
    and Monster : sig
      type t

      module Vector : Rt.VectorS with type 'b elt := ('b, t) Rt.fb and type builder_elt := t Rt.wip

      val extension : string option
      val identifier : string option
      val root : ?size_prefixed:bool -> ?off:int -> R.T.buf -> t Rt.root
      val finish_buf : ?size_prefixed:bool -> Rt.Builder.t -> t Rt.wip -> R.T.buf

      val pos : 'b Rt.buf -> ('b, t) Rt.fb -> ('b, Vec3.t) Rt.fbopt
      val mana : 'b Rt.buf -> ('b, t) Rt.fb -> Rt.Short.t
      val hp : 'b Rt.buf -> ('b, t) Rt.fb -> Rt.Short.t
      val name : 'b Rt.buf -> ('b, t) Rt.fb -> ('b, Rt.String.t) Rt.fbopt
      val inventory : 'b Rt.buf -> ('b, t) Rt.fb -> ('b, Rt.UByte.Vector.t) Rt.fbopt
      val color : 'b Rt.buf -> ('b, t) Rt.fb -> Color.t
      val weapons : 'b Rt.buf -> ('b, t) Rt.fb -> ('b, Weapon.Vector.t) Rt.fbopt
      val equipped_type : 'b Rt.buf -> ('b, t) Rt.fb -> Equipment.t
      val equipped : ?none:'a -> ?weapon:(('b, Weapon.t) Rt.fb -> 'a) -> default:(Equipment.t -> 'a) -> 'b Rt.buf -> ('b, t) Rt.fb -> 'a
      val path : 'b Rt.buf -> ('b, t) Rt.fb -> ('b, Vec3.Vector.t) Rt.fbopt

      module Builder : sig
        type t

        val start : Rt.Builder.t -> t
        val finish : t -> Monster.t Rt.wip
        val add_pos : Vec3.t -> t -> t
        val add_mana : Rt.Short.t -> t -> t
        val add_hp : Rt.Short.t -> t -> t
        val add_name : Rt.String.t Rt.wip -> t -> t
        val add_inventory : Rt.UByte.Vector.t Rt.wip -> t -> t
        val add_color : Color.t -> t -> t
        val add_weapons : Weapon.Vector.t Rt.wip -> t -> t
        val add_equipped_weapon : Weapon.t Rt.wip -> t -> t
        val add_path : Vec3.Vector.t Rt.wip -> t -> t
      end
    end
  end (* Sample *)
end (* MyGame *)
end
