(** Automatically generated by the FlatBuffers compiler

    root type: benchmarks_flatbuffers.FooBarContainer (//bench.fbs)
    flatc version: 23.3.3
*)

[@@@warning "-32"]

module Make (R : Flatbuffers.Runtime.Intf_impl) = struct
module Rt = R

module Struct = struct

  let rec set_bar__3 b i (parent_, time_, ratio_, size_) =
    set_foo__2 b (i + 0) parent_;
    Rt.Int.set b (i + 16) time_;
    Rt.Float.set b (i + 20) ratio_;
    Rt.UShort.set b (i + 24) size_;
    Rt.Builder.set_padding b (i + 26) 6;

  and set_foo__2 b i (id_, count_, prefix_, length_) =
    Rt.ULong.set b (i + 0) id_;
    Rt.Short.set b (i + 8) count_;
    Rt.Byte.set b (i + 10) prefix_;
    Rt.Builder.set_padding b (i + 11) 1;
    Rt.UInt.set b (i + 12) length_;
end

module BenchmarksFlatbuffers = struct
  module Enum = struct
    type t = Rt.Short.t

    let apples = Rt.Short.of_default 0L
    let pears = Rt.Short.of_default 1L
    let bananas = Rt.Short.of_default 2L

    let to_string e =
      match Rt.Short.to_default e with
      | 0L -> "apples"
      | 1L -> "pears"
      | 2L -> "bananas"
      | x -> "<benchmarks_flatbuffers.Enum: " ^ (Int64.to_string x) ^ ">"

    module Vector = Rt.Short.Vector
  end

  module FooBarContainer = struct
    type t

    module Vector = Rt.Ref.Vector

    let extension = None
    let identifier = None
    let root ?(size_prefixed = false) ?(off = 0) b = Rt.get_root b ~size_prefixed ~off
    let finish_buf = Rt.Builder.finish ?identifier

    let list b o = Rt.Ref.read_table_opt b o 4
    let initialized b o = Rt.Bool.(read_table_default b o 6 ~default:(of_default false))
    let fruit b o = Rt.Short.(read_table_default b o 8 ~default:(of_default 0L))
    let location b o = Rt.Ref.read_table_opt b o 10

    module Builder = struct
      type t = Rt.Builder.t

      let start b = Rt.Builder.start_table b ~n_fields:4
      let finish b = Rt.Builder.end_table b
      let add_list = Rt.Ref.push_slot 0
      let add_initialized = Rt.Bool.(push_slot_default 1 ~default:(of_default false))
      let add_fruit = Rt.Short.(push_slot_default 2 ~default:(of_default 0L))
      let add_location = Rt.Ref.push_slot 3
    end
  end

  module FooBar = struct
    type t

    module Vector = Rt.Ref.Vector

    let sibling b o = Rt.Struct.read_table_opt b o 4
    let name b o = Rt.Ref.read_table_opt b o 6
    let rating b o = Rt.Double.(read_table_default b o 8 ~default:(of_default 0.0))
    let postfix b o = Rt.UByte.(read_table_default b o 10 ~default:(of_default 0L))

    module Builder = struct
      type t = Rt.Builder.t

      let start b = Rt.Builder.start_table b ~n_fields:4
      let finish b = Rt.Builder.end_table b
      let add_sibling = Rt.Struct.push_slot Struct.set_bar__3 32 8 0
      let add_name = Rt.Ref.push_slot 1
      let add_rating = Rt.Double.(push_slot_default 2 ~default:(of_default 0.0))
      let add_postfix = Rt.UByte.(push_slot_default 3 ~default:(of_default 0L))
    end
  end

  module Foo = struct
    type t = (Rt.ULong.t * Rt.Short.t * Rt.Byte.t * Rt.UInt.t)

    module Vector = Rt.Struct.Vector (struct type builder_elt = t let size = 16 let set = Struct.set_foo__2 end)

    let id b s = Rt.ULong.read_offset b s 0
    let count b s = Rt.Short.read_offset b s 8
    let prefix b s = Rt.Byte.read_offset b s 10
    let length b s = Rt.UInt.read_offset b s 12
  end

  module Bar = struct
    type t = ((Rt.ULong.t * Rt.Short.t * Rt.Byte.t * Rt.UInt.t) * Rt.Int.t * Rt.Float.t * Rt.UShort.t)

    module Vector = Rt.Struct.Vector (struct type builder_elt = t let size = 32 let set = Struct.set_bar__3 end)

    let parent b s = Rt.Struct.read_offset b s 0
    let time b s = Rt.Int.read_offset b s 16
    let ratio b s = Rt.Float.read_offset b s 20
    let size b s = Rt.UShort.read_offset b s 24
  end
end (* BenchmarksFlatbuffers *)
end
